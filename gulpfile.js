'use strict';

var del          = require('del');
var gulp         = require('gulp');
var imagemin     = require('gulp-imagemin');
var prune        = require('gulp-prune');
var newer        = require('gulp-newer');
var useref       = require('gulp-useref');
var htmlmin      = require('gulp-htmlmin');
var sourcemaps   = require('gulp-sourcemaps');
var concat       = require('gulp-concat');
var postcss      = require('gulp-postcss');
var uglify       = require('gulp-uglify');
var xslt         = require('gulp-xslt2');
var srizer       = require('gulp-srizer');
var critical     = require('critical').stream;
var replace      = require('gulp-replace');
var rsync        = require('rsyncwrapper');

gulp.task('clean', function() {
	return del(['dist/**', '!dist']);
});

gulp.task('images', function() {
	var src  = ['dev/img/*'];
	var dest = 'dist/img';
	return gulp.src(src)
		.pipe(prune(dest))
		.pipe(newer(dest))
		.pipe(imagemin([
			imagemin.gifsicle({interlaced: true}),
			imagemin.jpegtran({progressive: true}),
			imagemin.optipng({optimizationLevel: 9})
		]))
		.pipe(gulp.dest(dest))
	;
});

gulp.task('html', ['css', 'js'], function() {
	var dest = 'dist'
	return gulp.src(['./dev/*.html'])
		.pipe(newer({
			dest: dest
		}))
		.pipe(useref({
			searchPath: 'dev',
			noAssets: true
		}))
		.pipe(srizer({ fileExt: '{css,js}', path: dest }))
		.pipe(htmlmin({
			removeComments: true,
			collapseWhitespace: true,
			caseSensitive: true,
			decodeEntities: true,
			keepClosingSlash: true,
			collapseBooleanAttributes: false,
			removeAttributeQuotes: false,
			removeRedundantAttributes: true,
			removeEmptyAttributes: true,
			removeScriptTypeAttributes: true,
			removeStyleLinkTypeAttributes: true,
			removeOptionalTags: false,
			includeAutoGeneratedTags: false,
			minifyJS: true,
			minifyCSS: true
		}))
		.pipe(critical({
			base: './dist/',
			inline: true,
			minify: true,
			css: ['dist/styles/combined.min.css'],
			ignore: ['@font-face', /url\(/],
			penthouse: { keepLargerMediaQueries: true }
		}))
		.pipe(replace('\n<script></script>', ''))
		.pipe(replace('\n</style>', '</style>'))
		.pipe(replace('<style type="text/css">\n', '<style>'))
		.pipe(gulp.dest(dest))
	;
});

gulp.task('css', function() {
	var src  = ['dev/styles/*.css'];
	var dest = 'dist/styles';
	return gulp.src(src)
		.pipe(prune({
			dest: dest,
			map: function() { return ['combined.min.css', 'combined.min.css.map']; }
		}))
		.pipe(newer({ dest: dest + '/combined.min.css' }))
		.pipe(sourcemaps.init())
		.pipe(concat('combined.min.css'))
		.pipe(
			postcss([
				require('autoprefixer')({browsers: '> 5%'}),
				require('cssnano')()
			])
		)
		.pipe(sourcemaps.write('.'))
		.pipe(gulp.dest(dest))
	;
});

gulp.task('js', function() {
	var src  = ['./dev/js/jquery*.js', './dev/js/bootstrap.min.js', './dev/js/main.js'];
	var dest = 'dist/js';
	return gulp.src(src)
		.pipe(prune({
			dest: dest,
			map: function() { return ['combined.min.js', 'combined.min.js.map']; }
		}))
		.pipe(newer({ dest: dest + '/combined.min.js' }))
		.pipe(sourcemaps.init())
		.pipe(concat('combined.min.js'))
		.pipe(uglify())
		.pipe(sourcemaps.write('.'))
		.pipe(gulp.dest(dest))
	;
});

gulp.task('xml:data', function() {
	var src  = ['./dev/data/data_*.xml'];
	var dest = 'dist/data';

	return gulp.src(src)
		.pipe(newer({ dest: dest }))
		.pipe(xslt('dev/data/data.xslt'))
		.pipe(gulp.dest(dest))
	;
});

gulp.task('xml:loc', function() {
	var src  = ['./dev/data/loc_*.xml'];
	var dest = 'dist/data';

	return gulp.src(src)
		.pipe(newer({ dest: dest }))
		.pipe(xslt('dev/data/locations.xslt'))
		.pipe(gulp.dest(dest))
	;
});

gulp.task('xml', ['xml:data', 'xml:loc']);

gulp.task('deploy', function(done) {
	var config = require('./.internal/config.json');
	rsync({
		args: ['-aHz', '--password-file=.internal/password'],
		src: './dist/',
		dest: config.deploy_target,
		delete: true,
		dryRun: !true
	}, function (error, stdout, stderr, cmd) {
		console.log(cmd);
		console.log(stdout);
		console.log(stderr);
		done();
	});
});

gulp.task('default', ['images', 'css', 'js', 'html', 'xml']);
